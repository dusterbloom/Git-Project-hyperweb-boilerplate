{
  "version": 3,
  "sources": ["../../src/bluesky-registry/index.ts"],
  "sourcesContent": ["export interface State {\n  get(key: string): string;\n  set(key: string, value: any): void;\n}\n\nexport interface RegistryArgs {\n  handle: string;\n  publicKey: string;\n}\n\nexport default class BlueskyRegistry {\n  state: State;\n\n  constructor(state: State) {\n    this.state = state;\n  }\n\n  /**\n   * Register a Bluesky handle -> publicKey mapping.\n   * Throws an error if this handle is already registered.\n   */\n  registerBlueskyHandle({ handle, publicKey }: RegistryArgs): string {\n    if (this.state.get(`bluesky/${handle}`)) {\n      throw Error(`Handle \"${handle}\" is already registered.`);\n    }\n    this.state.set(`bluesky/${handle}`, publicKey);\n    return `Registered handle: ${handle}`;\n  }\n\n  /**\n   * Query the publicKey for a given Bluesky handle.\n   * Throws an error if the handle isn't registered.\n   */\n  getPublicKeyForHandle({ handle }: { handle: string }): string {\n    const storedPk = this.state.get(`bluesky/${handle}`);\n    if (!storedPk) {\n      throw Error(`No public key found for handle: ${handle}`);\n    }\n    return storedPk;\n  }\n}\n"],
  "mappings": ";AAUA,IAAqB,kBAArB,MAAqC;AAAA,EACnC;AAAA,EAEA,YAAY,OAAc;AACxB,SAAK,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,sBAAsB,EAAE,QAAQ,UAAU,GAAyB;AACjE,QAAI,KAAK,MAAM,IAAI,WAAW,MAAM,EAAE,GAAG;AACvC,YAAM,MAAM,WAAW,MAAM,0BAA0B;AAAA,IACzD;AACA,SAAK,MAAM,IAAI,WAAW,MAAM,IAAI,SAAS;AAC7C,WAAO,sBAAsB,MAAM;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,sBAAsB,EAAE,OAAO,GAA+B;AAC5D,UAAM,WAAW,KAAK,MAAM,IAAI,WAAW,MAAM,EAAE;AACnD,QAAI,CAAC,UAAU;AACb,YAAM,MAAM,mCAAmC,MAAM,EAAE;AAAA,IACzD;AACA,WAAO;AAAA,EACT;AACF;",
  "names": []
}
